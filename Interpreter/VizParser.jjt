	options
	{
		LOOKAHEAD = 2;
		FORCE_LA_CHECK = true;
		MULTI = true;
		VISITOR = true;
		NODE_PACKAGE = "Interpreter";
	}

	PARSER_BEGIN(VizParser)
	package Interpreter;
	
	import java.util.*;
	
	public class VizParser
	{
		public static void main(String[] args)
		{
			try
			{
				VizParser vp = new VizParser(System.in);
				Node n = vp.program();
				VizParserVisitor r = new RandomizingVisitor();
				n.visit(r, null);
				HashMap<String, ASTFunction> funs = Global.getFunctions();
				SymbolTable table = Global.getCurrentSymbolTable();
				System.out.println("Got funs: " + funs.size());
				for (String f : funs.keySet())
				{
					System.out.println(f);
					ArrayList<String> params = funs.get(f).getParameters();
					for (String p : params)
					{
						System.out.println(" " + p);
					}
				}
			}
			catch (Exception e)
			{
				System.out.println(e);
			}
		}
	}

	PARSER_END(VizParser)

	TOKEN:
	{
		<DEF: "def" >
		| <VAR: "var" >
		| <NUM: ["0"-"9"] (["0"-"9"])* >
		| <ID: <LETTER> (<LETTER>)* >
		| <LETTER: ["a"-"z", "A"-"Z"] >
		| <LTBCE: "{" >
		| <RTBCE: "}" >
		| <LTBCR: "[" >
		| <RTBCR: "]" >
		| <LTPRN: "(" >
		| <RTPRN: ")" >	
		| <SEMI: ";" >
		| <COMMA: "," >
		| <PLUS: "+" >
		| <MINUS: "-" >
		| <EQL: "=" >
	}

	SKIP:
	{
		" "
		| "\t"
		| "\n"
		| "\r"
	}


	Node program():
	{
	}
	{
		
		declarationList()
		{
				
			return jjtThis;
		}
	}

	void declarationList() #void:
	{
	}
	{
		declaration() (declarationList())?
	}

	void declaration() #void:
	{
	}
	{
		<VAR> varDecl() <SEMI> | funDecl()
	}

	void varDecl() #VarDecl:
	{
		Token t;
	}
	{
		id() (<LTBCR> <RTBCR>)? <EQL> varDeclP()
		{
			
		} 
	}
	
	void id() #Id:
	{
		
	}
	{
		var()
	}
	
	void varDeclP() #void:
	{
	}
	{
		<LTBCE> arrayDecl() <RTBCE> | expression()
	}
	

	void arrayDecl() #void:
	{
	}
	{
		<NUM> (<COMMA> arrayDecl())?
	}

	void funDecl() #Function:
	{
		Token name;
		ArrayList<String> parameters = new ArrayList<String>();
	}
	{
		<DEF> name = <ID> <LTPRN> parameters =  params() <RTPRN> compoundStatement()
		{
			jjtThis.setName(name.image);
			for (String p : parameters)
			{
				jjtThis.addParameter(p);
			}
			System.out.println("Adding a function");
			if(Global.addFunction(jjtThis))
			{
				System.out.println("Added a function");
			}
		}
	}

	void compoundStatement() #void:
	{
	}
	{
		<LTBCE> statementList() <RTBCE>
	}

	void statementList() #void:
	{
	}
	{
		[statement() statementListP()]
	}
	
	void statementListP() #void:
	{
	}
	{
		statementList()
	}

	void statement() #void:
	{
	}
	{
		 expression() <SEMI> |  <VAR> varDecl() <SEMI>
	}

	void call() #Call:
	{
	}
	{
		<ID> <LTPRN> args() <RTPRN>
	}

	void var() #Var:
	{
	}
	{
		<ID> (<LTBCR> expression() <RTBCR>)?
	}

	void assignment():
	{
	}
	{
		<EQL> expression()
	}

	void expression() #Expression:
	{
	}
	{
		 call() |  var() (assignment())? (op() expression())? | var() (op() expression())?| (<NUM> (op() expression())?) 
	}	
	

	void args():
	{
	}
	{
		var() (<COMMA> args())? | <NUM> (<COMMA> args())?
	}

	ArrayList<String> params():
	{
		ArrayList<String> names = new ArrayList<String>();
		Token newName;
	}
	{
		newName = <ID> (<COMMA> names = params())?
		{
			names.add(newName.image);
			System.out.println("Returning names: " + names.size());
			return names;
		}
	}
	
	void op():
	{
	}
	{
		<PLUS> | <MINUS>
	}


