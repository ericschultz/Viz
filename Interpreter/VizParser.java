/* Generated By:JJTree&JavaCC: Do not edit this line. VizParser.java */
        package Interpreter;

        import java.util.*;
        /**
	 * Class VizParser
	 * @authors Tom Fairfield, Eric Schultz
	 */
        public class VizParser/*@bgen(jjtree)*/implements VizParserTreeConstants, VizParserConstants {/*@bgen(jjtree)*/
  protected static JJTVizParserState jjtree = new JJTVizParserState();

        /**
	 * The intial node. Has 1 child of type DeclarationList 
	 * @returns the ASTProgram node created
	 */
  static final public SimpleNode program() throws ParseException {
         /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      declarationList();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return (SimpleNode) jjtn000;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

        /**
	 * A DeclarationList has N children of type Declaration.  
	 * @returns the ASTDeclarationList node created
	 */
  static final public SimpleNode declarationList() throws ParseException {
         /*@bgen(jjtree) DeclarationList */
                ASTDeclarationList jjtn000 = new ASTDeclarationList(JJTDECLARATIONLIST);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);SimpleNode dl = null;
    try {
      declaration();
      if (jj_2_1(5)) {
        declarationListP();
      } else {
        ;
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return (SimpleNode)jjtn000;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

        /**
	* The second half of declarationList.  No node created so all
	* nodes created in this scope are children of the DeclarationList
	*/
  static final public void declarationListP() throws ParseException {
    declaration();
    if (jj_2_2(5)) {
      declarationListP();
    } else {
      ;
    }

  }

        /**
	 * A declaration has 1 child of type ASTFunction or ASTVarDecl
	 * @returns a Simplenode which is the ASTFunction or ASTVarDecl node created
	 */
  static final public SimpleNode declaration() throws ParseException {
         /*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_3(5)) {
        jj_consume_token(VAR);
        varDecl();
        jj_consume_token(SEMI);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return jjtn000;}
      } else if (jj_2_4(5)) {
        funDecl();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        {if (true) return (SimpleNode)jjtn000;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

        /**
	 * A VarDecl knows the lefthand variable's name.
	 * It has a child of type expression which is the righthand side
	 * of the assignment
	 * @returns the ASTVarDecl created
	 */
  static final public SimpleNode varDecl() throws ParseException {
         /*@bgen(jjtree) VarDecl */
                ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
                boolean isArray = false;
    try {
      t = jj_consume_token(ID);
      if (jj_2_5(5)) {
        isArray = arrayBrackets();
      } else {
        ;
      }
      jj_consume_token(EQL);
      varDeclP();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.setName(t.image);

                        //Here we're created a variable to be put in the symbol table.
                        // VarDecls are always ByValVariables in Value, Reference, and C/R
                        ByValVariable v = new ByValVariable(-255);
                        if (isArray)
                        {
                                v.setArray();
                        }
                        Global.getCurrentSymbolTable().put(t.image, v);
                        jjtn000.setIsArray(isArray);
                        {if (true) return (SimpleNode) jjtn000;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

        /**
	 * consumes the array brackets
	 * @returns true so we know it's an array;
	 */
  static final public boolean arrayBrackets() throws ParseException {
    jj_consume_token(LTBCR);
    jj_consume_token(RTBCR);
                        {if (true) return true;}
    throw new Error("Missing return statement in function");
  }

        /**
	 * the second half of varDecl.  It doesn't create a node
	 * so all children are children of VarDecl.  Goes to either
	 * arrayDecl or an expression for the righthand side.
	 */
  static final public void varDeclP() throws ParseException {
    if (jj_2_6(5)) {
      jj_consume_token(LTBCE);
      arrayDecl();
      jj_consume_token(RTBCE);
    } else if (jj_2_7(5)) {
      expression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /**
	 * the righthand side of an array declaration
	 * an ArrayDeclaration has N children of type ASTNum
	 * which are the array values.
	 */
  static final public void arrayDecl() throws ParseException {
         /*@bgen(jjtree) ArrayDeclaration */
  ASTArrayDeclaration jjtn000 = new ASTArrayDeclaration(JJTARRAYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      num();
      if (jj_2_8(5)) {
        jj_consume_token(COMMA);
        arrayDeclP();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

        /**
	 * the second half of arrayDecl.  Doesn't create a node
	 * so all children are children of the ASTArrayDecl.
	 */
  static final public void arrayDeclP() throws ParseException {
    num();
    if (jj_2_9(5)) {
      jj_consume_token(COMMA);
      arrayDeclP();
    } else {
      ;
    }
  }

        /**
	 * a funDecl creates an ASTFunction for a function declaration.
	 * It knows its name, a list of the parameter names, and its scope's
	 * symbol Table.  
 	 * An ASTFunction has one child of type ASTStatementList
 	 * @returns the ASTFunction node created.
	 */
  static final public SimpleNode funDecl() throws ParseException {
         /*@bgen(jjtree) Function */
                ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token name;
                ArrayList<String> parameters = new ArrayList<String>();
                Global.setCurrentSymbolTable(jjtn000.getSymbolTable());
    try {
      jj_consume_token(DEF);
      name = jj_consume_token(ID);
      jj_consume_token(LTPRN);
      if (jj_2_10(5)) {
        parameters = params();
      } else {
        ;
      }
      jj_consume_token(RTPRN);
      compoundStatement();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.setName(name.image);

                        for (String p : parameters)
                        {
                                //FIXME: multiple variable types
                                // I'm not sure what this fixme means.  I think it's old but I'm
                                // going to leave it in now
                                jjtn000.addParameter(p);
                        }
                        if(Global.addFunction(jjtn000))
                        {
                                //System.out.println("Successfully added a function");
                        }
                        {if (true) return (SimpleNode) jjtn000;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

        /**
	 * compoundStatement consumes the left and right {} and has one child
	 * of type statementList.  It does not create a node so the statementList
	 * has a parent of the ASTFunction.
	 */
  static final public void compoundStatement() throws ParseException {
    jj_consume_token(LTBCE);
    statementList();
    jj_consume_token(RTBCE);
  }

        /**
	 * Statementlist has N children of type ASTStatement.
	 * It can alos have no children if the body of the function
	 * is "<FILL>.  This allows for randomization.
	 */
  static final public void statementList() throws ParseException {
         /*@bgen(jjtree) StatementList */
  ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_12(5)) {
        statement();
        if (jj_2_11(5)) {
          statementListP();
        } else {
          ;
        }
      } else if (jj_2_13(5)) {
        jj_consume_token(FILL);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

        /**
	 * The other half of statementList.  No node is created
	 * so it's children have a parent of the ASTStatementList
	 */
  static final public void statementListP() throws ParseException {
    statement();
    if (jj_2_14(5)) {
      statementListP();
    } else {
      ;
    }
  }

        /**
	 * an ASTStatement has one child of type expression or varDecl
	 * 
	 */
  static final public void statement() throws ParseException {
         /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_15(5)) {
        expression();
        jj_consume_token(SEMI);
      } else if (jj_2_16(5)) {
        jj_consume_token(VAR);
        varDecl();
        jj_consume_token(SEMI);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                   if (jjtc000) {
                     jjtree.clearNodeScope(jjtn000);
                     jjtc000 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte000 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte000;}
                   }
                   if (jjte000 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte000;}
                   }
                   {if (true) throw (Error)jjte000;}
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

        /**
	 * an ASTCall represented a function call.  It knows the name of the
	 * function it is calling as well as the ASTArgs it is being called with.
	 */
  static final public void call() throws ParseException {
         /*@bgen(jjtree) Call */
                ASTCall jjtn000 = new ASTCall(JJTCALL);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
      jj_consume_token(LTPRN);
      if (jj_2_17(5)) {
        args();
      } else {
        ;
      }
      jj_consume_token(RTPRN);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.setName(t.image);
                        jjtn000.addArgs(((ASTArgs)jjtn000.jjtGetChild(0)).getArgs());
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

        /**
	 * an ASTVar is either a single variable or an array member.
	 * it knows its name and, if it's an array, has a child of type 
	 * ASTExpression which is the index.  
	 * @returns the variable's name
	 */
  static final public String var() throws ParseException {
         /*@bgen(jjtree) Var */
                ASTVar jjtn000 = new ASTVar(JJTVAR);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
                boolean isArray = false;
    try {
      t = jj_consume_token(ID);
      if (jj_2_18(5)) {
        jj_consume_token(LTBCR);
        isArray = expression();
        jj_consume_token(RTBCR);
      } else {
        ;
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.setName(t.image);
                        jjtn000.setIsArray(isArray);
                        {if (true) return t.image;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

        /**
	 * an assignment statement.  The ASTAssignment knows its name.
	 * It has one child of type ASTExpression which is the righthand
	 * side of the assignment.  
	 */
  static final public void assignment() throws ParseException {
         /*@bgen(jjtree) Assignment */
                ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);String name = "";
    try {
      name = var();
      jj_consume_token(EQL);
      expression();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.setName(name);
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

        /**
	 * an expression.  The ASTExpression has one child of type
	 * call, assignment, op, num, or var.  
	 * @returns true... for some reason.  
	 */
  static final public boolean expression() throws ParseException {
         /*@bgen(jjtree) Expression */
                ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);ASTVar variable;
    try {
      if (jj_2_19(5)) {
        call();
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                         {if (true) return true;}
      } else if (jj_2_20(5)) {
        assignment();
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               {if (true) return true;}
      } else if (jj_2_21(5)) {
        op();
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       {if (true) return true;}
      } else if (jj_2_22(5)) {
        num();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                        {if (true) return true;}
      } else if (jj_2_23(5)) {
        var();
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       {if (true) return true;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                   if (jjtc000) {
                     jjtree.clearNodeScope(jjtn000);
                     jjtc000 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte000 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte000;}
                   }
                   if (jjte000 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte000;}
                   }
                   {if (true) throw (Error)jjte000;}
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
    throw new Error("Missing return statement in function");
  }

        /**
	 * The arguments to a function.  ASTArgs has N children of type ASTVar
	 * It also saves references to the ASTVar children.  
	 */
  static final public void args() throws ParseException {
         /*@bgen(jjtree) Args */
  ASTArgs jjtn000 = new ASTArgs(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      var();
      if (jj_2_24(5)) {
        jj_consume_token(COMMA);
        argsP();
      } else {
        ;
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        //FIXME:  This can't be the best way to handle things.
                        // find a better way. 
                        jjtn000.gatherArgs();
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

        /**
	 * the other half of args.  It doesn't create a node so
	 * all children are children of the ASTArgs.
	 */
  static final public void argsP() throws ParseException {
    var();
    if (jj_2_25(5)) {
      jj_consume_token(COMMA);
      argsP();
    } else {
      ;
    }
  }

        /**
	 * function parameters.  This matches the parameters to a function.
	 * No node is created, the children are children of the ASTFunction
	 * @returns an ArrayList of the parameter names.
	 */

        //FIXME: Is this going to bite me later?  Maybe do it more like args.  
  static final public ArrayList<String> params() throws ParseException {
                ArrayList<String> names = new ArrayList<String>();
                Token newName;
    newName = jj_consume_token(ID);
    if (jj_2_26(5)) {
      jj_consume_token(COMMA);
      names = params();
    } else {
      ;
    }
                        names.add(0, newName.image);

                        {if (true) return names;}
    throw new Error("Missing return statement in function");
  }

        /**
	 * a +- expression.  the ASTOp knows its operation and has two children -
	 * a left child of type ASTVar or ASTNum and a left side of type ASTExpression
	 */
  static final public void op() throws ParseException {
         /*@bgen(jjtree) Op */
                ASTOp jjtn000 = new ASTOp(JJTOP);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      if (jj_2_27(5)) {
        var();
      } else if (jj_2_28(5)) {
        num();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_29(5)) {
        t = jj_consume_token(PLUS);
      } else if (jj_2_30(5)) {
        t = jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression();
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                        jjtn000.setOp(t.image);
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

        /**
	 * A literal number value.  An ASTNum knows it's value.
	 */
  static final public void num() throws ParseException {
         /*@bgen(jjtree) Num */
                ASTNum jjtn000 = new ASTNum(JJTNUM);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUM);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                        jjtn000.setValue(Integer.parseInt(t.image));
    } finally {
                   if (jjtc000) {
                     jjtree.closeNodeScope(jjtn000, true);
                   }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(LTBCE)) return true;
    if (jj_3R_5()) return true;
    if (jj_scan_token(RTBCE)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(LTBCR)) return true;
    if (jj_scan_token(RTBCR)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_10()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(LTBCE)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(EQL)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_scan_token(EQL)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(LTBCR)) return true;
    if (jj_3R_6()) return true;
    if (jj_scan_token(RTBCR)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_3() {
    if (jj_scan_token(DEF)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LTPRN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    if (jj_scan_token(RTPRN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_2()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LTPRN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    if (jj_scan_token(RTPRN)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(FILL)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_16()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public VizParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[30];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public VizParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public VizParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VizParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public VizParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new VizParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public VizParser(VizParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(VizParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
