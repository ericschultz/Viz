/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\VizParser.jj */
/*@egen*/	options
	{
		LOOKAHEAD = 2;
		FORCE_LA_CHECK = true;
	}

	PARSER_BEGIN(VizParser)
	package Interpreter;
	
	public class VizParser/*@bgen(jjtree)*/implements VizParserTreeConstants/*@egen*/
	{/*@bgen(jjtree)*/
  protected static JJTVizParserState jjtree = new JJTVizParserState();

/*@egen*/
		public static void main(String[] args)
		{
			try
			{
				VizParser vp = new VizParser(System.in);
				SimpleNode node =vp.program();
				node.dump("");
			}
			catch (Exception e)
			{
				System.out.println(e);
			}
		}
	}

	PARSER_END(VizParser)

	TOKEN:
	{
		<DEF: "def" >
		| <VAR: "var" >
		| <NUM: ["0"-"9"] (["0"-"9"])* >
		| <ID: <LETTER> (<LETTER>)* >
		| <LETTER: ["a"-"z", "A"-"Z"] >
		| <LTBCE: "{" >
		| <RTBCE: "}" >
		| <LTBCR: "[" >
		| <RTBCR: "]" >
		| <LTPRN: "(" >
		| <RTPRN: ")" >	
		| <SEMI: ";" >
		| <COMMA: "," >
		| <PLUS: "+" >
		| <MINUS: "-" >
		| <EQL: "=" >
	}

	SKIP:
	{
		" "
		| "\t"
		| "\n"
		| "\r"
	}


	SimpleNode program():
	{/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) program */
                try {
/*@egen*/
		
		declarationList()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{
				
			return jjtn000;
		}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void declarationList()      :
	{
	}
	{
		declaration() (declarationList())?
	}

	void declaration()      :
	{
	}
	{
		<VAR> varDecl() <SEMI> | funDecl()
	}

	void varDecl():
	{/*@bgen(jjtree) varDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) varDecl */
                try {
/*@egen*/
		<ID> (<LTBCR> <RTBCR>)? <EQL> varDeclP()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/ 
	}
	
	void varDeclP()      :
	{
	}
	{
		<LTBCE> arrayDecl() <RTBCE> | expression()
	}
	

	void arrayDecl()      :
	{
	}
	{
		<NUM> (<COMMA> arrayDecl())?
	}

	void funDecl():
	{/*@bgen(jjtree) funDecl */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) funDecl */
                try {
/*@egen*/
		<DEF> <ID> <LTPRN> params() <RTPRN> compoundStatement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void compoundStatement()      :
	{
	}
	{
		<LTBCE> statementList() <RTBCE>
	}

	void statementList()      :
	{
	}
	{
		[statement() statementListP()]
	}
	
	void statementListP()      :
	{
	}
	{
		statementList()
	}

	void statement()      :
	{
	}
	{
		 expression() <SEMI> |  <VAR> varDecl() <SEMI>
	}

	void call():
	{/*@bgen(jjtree) call */
  SimpleNode jjtn000 = new SimpleNode(JJTCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) call */
                try {
/*@egen*/
		<LTPRN> args() <RTPRN>/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void var():
	{/*@bgen(jjtree) var */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) var */
                try {
/*@egen*/
		(<LTBCR> expression() <RTBCR>)?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void assignment():
	{/*@bgen(jjtree) assignment */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) assignment */
                try {
/*@egen*/
		<EQL> expression()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void expression()      :
	{
	}
	{
		<ID> call() | <ID> var() (assignment())? (op() expression())? | <ID> var() (op() expression())?| (<NUM> (op() expression())?) 
	}	
	

	void args():
	{/*@bgen(jjtree) args */
  SimpleNode jjtn000 = new SimpleNode(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) args */
                try {
/*@egen*/
		<ID> var() (<COMMA> args())? | <NUM> (<COMMA> args())?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}

	void params():
	{/*@bgen(jjtree) params */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) params */
                try {
/*@egen*/
		<ID> (<COMMA> params())?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}
	
	void op():
	{/*@bgen(jjtree) op */
  SimpleNode jjtn000 = new SimpleNode(JJTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
	}
	{/*@bgen(jjtree) op */
                try {
/*@egen*/
		<PLUS> | <MINUS>/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
	}


